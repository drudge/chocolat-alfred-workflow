/*!
 * node-alp
 * Copyright (c) 2014 Nicholas Penree <nick@penree.com>
 * MIT Licensed
 */

var js2xmlparser = require('js2xmlparser');
var format = require('util').format;
var crypto = require('crypto');
var core = require('./core');

var getRandBits = function(len) {
  return crypto.randomBytes(Math.ceil(len/2)).toString('hex').slice(0, len);
};

function Item(args) {
  args = args || {};
  this.title = args.title || '';
  this.subtitle = args.subtitle || '';
  this.uid = args.uid || format('%s.%s', core.bundleSync(), getRandBits(12));
  this.autocomplete = args.autocomplete;
  this.icon = args.icon || 'icon.png';
  this.fileIcon = (typeof args.fileIcon !== 'undefined') ? args.fileIcon : false;
  this.fileType = (typeof args.fileType !== 'undefined') ? args.fileType : false;
  this.arg = args.arg;
  this.type = args.type;
  
  if (typeof args.valid !== 'undefined') {
    if (args.valid === true) this.valid = 'yes';
    else if (args.valid === false) this.valid = 'no';
    else this.valid = args.valid;
  }
}

Item.prototype.feedback = function(items) {
  if (!items && this instanceof Item) items = [this];
  
  var processItem = function(anItem) {
    var content = {
      title: anItem.title,
      subtitle: anItem.subtitle,
      icon: anItem.icon,
      '@': {}
    };
    
    if (anItem.fileType === true) content.type = 'filetype';
    if (anItem.fileIcon === true) content.type = 'fileicon';
    if (anItem.autocomplete) content['@'].autocomplete = anItem.autocomplete;
    if (anItem.uid) content['@'].uid = anItem.uid;
    if (anItem.valid) content['@'].valid = anItem.valid;
    
    if (anItem.arg) {
      if (anItem.arg.indexOf('\n') !== -1) {
        content.arg = anItem.arg;
      } else {
        content['@'].arg = anItem.arg;
      }
    }
    
    if (anItem.type) content['@'].type = anItem.type;
    
    out += js2xmlparser('item', content, {
      declaration: { include: false },
      prettyPrinting: { enabled: false }
    });
  };
  
  items = Array.isArray(items) ? items : [items];
  
  var out = '<items>';
  
  items.forEach(function(item) {
    processItem(item);
  });
  
  out += '</items>';
  
  console.log(out);
};

module.exports = Item;